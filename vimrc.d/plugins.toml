[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
    let g:comfortable_motion_scroll_down_key = "j"
    let g:comfortable_motion_scroll_up_key = "k"
    nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
    nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
    let g:comfortable_motion_friction = 50
    let g:comfortable_motion_air_drag = 2.75
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'vim-scripts/open-browser.vim'
hook_add = '''
    nmap <Leader>b <Plug>(openbrowser-smart-search)
    vmap <Leader>b <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'vim-scripts/surround.vim'
hook_add = '''
    let g:surround_no_mappings = 1

    nmap ds <Plug>Dsurround
    nmap cs <Plug>Csurround
    nmap s <Plug>Ysurround
    xmap s <Plug>VSurround
'''

[[plugins]]
repo = 'gyim/vim-boxdraw'
hook_add = '''
    nnoremap <Leader>d :call ToggleFlag('virtualedit', 'all')<CR>
    function ToggleFlag(option,flag)
        exec ('let lopt = &' . a:option)
        if lopt =~ (".*" . a:flag . ".*")
            exec ('set ' . a:option . '-=' . a:flag)
        else
            exec ('set ' . a:option . '+=' . a:flag)
        endif
    endfunction
    vnoremap ab :<C-u>call boxdraw#Select("ao")<CR>
    vnoremap ib :<C-u>call boxdraw#Select("io")<CR>
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
hook_add = '''
    nnoremap <Leader>G<Enter> :Gtags <C-r><C-w><CR>
    nnoremap <Leader>Gr :Gtags -r <C-r><C-w><CR>
    nnoremap <Leader>Gl :Gtags -f %<CR>
    nnoremap <Leader>Gi :Gtags<CR>
    nnoremap <Leader>Gn :cn<CR>
    nnoremap <Leader>Gp :cp<CR>
'''

[[plugins]]
repo = 'zebult/auto-gtags.vim'
hook_add = '''
    nnoremap <Leader>Gg :GtagsCreate<CR>
    let g:auto_gtags = 1
'''

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
    nmap <silent> w <Plug>CamelCaseMotion_w
    nmap <silent> b <Plug>CamelCaseMotion_b
    nmap <silent> e <Plug>CamelCaseMotion_e
    omap <silent> ic <Plug>CamelCaseMotion_ie
    vmap <silent> ic <Plug>CamelCaseMotion_ie
    omap <silent> ac <Plug>CamelCaseMotion_iw
    vmap <silent> ac <Plug>CamelCaseMotion_iw
'''

[[plugins]]
repo = 'taqenoqo/vim-indent-guides'
rev = 'right-align'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_right_align = 1
    let g:indent_guides_default_mapping = 0

    hi IndentGuidesOdd  ctermbg=194 ctermfg=145
    hi IndentGuidesEven ctermbg=194 ctermfg=145
'''

[[plugins]]
repo = 'folti/ShowMarks'
hook_add = '''
    let g:showmarks_textlower = " "
    let g:showmarks_textupper = " "
    let g:showmarks_textother = " "
    let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    hi ShowMarksHLl ctermbg=153 ctermfg=69 cterm=BOLD
    hi ShowMarksHLu ctermbg=224 ctermfg=210 cterm=BOLD
    hi ShowMarksHLo ctermbg=231 ctermfg=250
    hi ShowMarksHLm ctermbg=228 ctermfg=208 cterm=BOLD,UNDERLINE
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeWinSize = 30
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']
hook_add = '''
    function! s:nerdtree_auto_start()
        if argc() == 0 && !exists("s:exists_std_in")
            let g:nerdtree_tabs_open_on_console_startup = 1
        endif
    endfunction

    augroup NerdtreeAutoStart
        autocmd!
        autocmd StdinReadPre * let s:exists_std_in = 1
        autocmd VimEnter * call s:nerdtree_auto_start()
    augroup END

    nnoremap <C-P> :tabprevious<CR>
    nnoremap <C-N> :tabnext<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = 'Ag'

[[plugins]]
repo = 'taiansu/nerdtree-ag'
depends = ['nerdtree', 'ag.vim']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']
hook_add = '''
   let g:NERDTreeIndicatorMapCustom = {
        \ "Untracked" : "!",
        \ "Modified"  : "*",
        \ "Dirty"     : "*",
        \ "Staged"    : "+",
        \ "Renamed"   : ">",
        \ "Unmerged"  : "!",
        \ "Deleted"   : "X",
        \ "Clean"     : "-",
        \ 'Ignored'   : '-',
        \ "Unknown"   : "?"
        \ } 

    hi NERDTreeFlags ctermfg=249
    hi NERDTreeGitStatusUntracked ctermfg=206
    hi NERDTreeGitStatusModified ctermfg=208
    hi NERDTreeGitStatusStaged ctermfg=077
    hi NERDTreeGitStatusRenamed ctermfg=69
    hi NERDTreeGitStatusUnmerged ctermfg=206
    hi NERDTreeGitStatusStaged ctermfg=077
    hi NERDTreeGitStatusDeleted ctermfg=197
    hi NERDTreeGitStatusClean ctermfg=249
    hi NERDTreeGitStatusIgnored ctermfg=249
    hi NERDTreeGitStatusUnknown ctermfg=249
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap <Leader>gc :Gcommit<CR>
    nmap <Leader>gs :Gstatus<CR>
    nmap <Leader>gd :Gdiff<CR>
    nmap <Leader>gl :Glog \| copen<CR>
    nmap <Leader>ga :Gwrite<CR>
    nmap ]h <Plug>GitGutterNextHunk
    nmap [h <Plug>GitGutterPrevHunk
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'roxma/nvim-yarp'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['vim-hug-neovim-rpc', 'nvim-yarp']
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1

    inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr> <CR> pumvisible() ? deoplete#close_popup() : "\<CR>"
    inoremap <expr> <BS> deoplete#smart_close_popup() . "\<BS>"
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Leader>r'
on_cmd = 'QuickRun'
hook_source = '''
    let g:quickrun_config = {}
    let g:quickrun_config['html'] = {
        \ 'outputter' : 'browser',
        \ 'command' : 'cat',
    \ }
    let g:quickrun_config['tex'] = {
        \ 'command': 'latexmk',
        \ 'cmdopt': '-pv',
        \ 'outputter': 'error',
        \ 'outputter/error/success': 'null',
        \ 'outputter/error/error': 'buffer',
        \ 'exec': [
            \ '%c %o %a %s'
        \ ]
    \ }
    let l:pandoc_opt =
        \ '--from=markdown_strict' .
        \ '+tex_math_dollars' .
        \ '+tex_math_double_backslash' .
        \ '+fenced_code_blocks' .
        \ '+fenced_code_attributes' .
        \ '+backtick_code_blocks' .
        \ '+definition_lists' .
        \ '+pipe_tables' .
        \ '+markdown_in_html_blocks' .
        \ '+footnotes' .
        \ '+inline_notes' .
        \ ' --to=html5' .
        \ ' --template="$HOME/.pandoc/template.html"' .
        \ ' --mathjax="$HOME/.pandoc/dynload.js"' .
        \ ' --css="$HOME/.pandoc/style.css"' .
        \ ' --include-in-header="$HOME/.pandoc/mathjax_config.html"' .
        \ ' --self-contained' .
        \ ' --standalone' .
        \ ' --variable=pagetitle:%{expand("%:t")}'
    let l:pandoc_pre_exec = '%c %o -t json %a %s | '
    let l:pandoc_post_exec = '%c %o -f json %a'
    let l:pandoc_filter = ''

    let l:pandoc_ditaa_filter_cmd = 'pandoc-ditaa-filter'
    let l:pandoc_ditaa_filter_opts = '--ditaa-opts="-E -S --svg" --img-ext="svg"'
    if executable(l:pandoc_ditaa_filter_cmd)
        let l:pandoc_filter = l:pandoc_filter . l:pandoc_ditaa_filter_cmd . ' ' . l:pandoc_ditaa_filter_opts . ' | '
    endif

    let l:diagrams_pandoc_cmd = 'diagrams-pandoc'
    if executable(l:diagrams_pandoc_cmd)
        let l:pandoc_filter = l:pandoc_filter . 'stack exec --resolver lts-12.14 ' . l:diagrams_pandoc_cmd . ' -- --backend SVG 2> >( sed -E "s/^[O.]+//" >\&2 ) | '
    endif

    let l:pandoc_exec = l:pandoc_pre_exec . l:pandoc_filter . l:pandoc_post_exec
    let g:quickrun_config['markdown'] = {
        \ 'type': 'pandoc',
        \ 'outputter': 'error',
        \ 'outputter/error/success': 'browser',
        \ 'outputter/error/error': 'buffer',
        \ 'cmdopt': l:pandoc_opt,
        \ 'exec': [
            \ l:pandoc_exec
        \ ]
    \ }
'''

[[plugins]]
repo = 'taqenoqo/vim-markdown'
rev = 'tex-math-dollars'
on_ft = 'markdown'
hook_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'zsh')
    call add(g:markdown_fenced_languages, 'c')
    call add(g:markdown_fenced_languages, 'ruby')
    call add(g:markdown_fenced_languages, 'vim')
    call add(g:markdown_fenced_languages, 'java')
    call add(g:markdown_fenced_languages, 'haskell')
    call add(g:markdown_fenced_languages, 'ocaml')
    call add(g:markdown_fenced_languages, 'javascript')
    call add(g:markdown_fenced_languages, 'r')
    call add(g:markdown_fenced_languages, 'sh')
    call add(g:markdown_fenced_languages, 'conf')
    call add(g:markdown_fenced_languages, 'pfmain')
    call add(g:markdown_fenced_languages, 'perl')
    hi link markdownCodeDelimiter Delimiter
    hi link markdownListMarker Identifier
    let g:markdown_fenced_tex = 1
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'
on_cmd = ['Outline', 'OutlineStart', 'OutlineStop']
hook_source = '''
    call unite#custom#profile('outline', 'context', {
        \ 'no_quit': 1,
        \ 'vertical': 1,
        \ 'winwidth': 40,
        \ 'direction': 'botright',
        \ 'hide_source_names': 1,
    \ })

    function! s:outline_on_move_window()
        if exists("g:outline_prev_bufnr") && bufnr("%") == g:outline_prev_bufnr
            return 
        endif
        " ウインドウの総数が減っていればウインドウが閉じられたとみなす
        if exists("g:outline_prev_win_num") && g:outline_prev_win_num > winnr("$")
            let g:outline_delayed_open = 1
            return
        endif
        call s:outline_open()
    endfunction

    function! s:outline_open()
        let l:buf_is_listed = getbufinfo("%")[0]['listed']
        if !l:buf_is_listed
            return 
        endif
        let g:outline_prev_bufnr = bufnr("%")
        let l:prev_winnr = winnr()
        if &foldmethod == 'marker'
            silent UniteClose
            execute l:prev_winnr "wincmd w"
            silent Unite -profile-name=outline outline:folding
            execute l:prev_winnr "wincmd w"
        elseif unite#sources#outline#get_outline_info(&filetype) != {}
            silent UniteClose
            execute l:prev_winnr "wincmd w"
            silent Unite -profile-name=outline outline
            execute l:prev_winnr "wincmd w"
        endif
    endfunction

    " ウィンドウが閉じられたのか判定するために、ウインドウを離れるときのウインドウの総数を記憶する
    function! s:outline_on_leave_window()
        let g:outline_prev_win_num = winnr("$")
    endfunction

    function! s:outline_delayed_open()
        if !exists("g:outline_delayed_open") || !g:outline_delayed_open
            return
        endif
        let g:outline_delayed_open = 0
        call s:outline_open()
    endfunction

    function! s:outline_start()
        augroup outline
            autocmd!
            " WinEnter の後に BufEnter が呼ばれる。 
            " WinEnter ではなく BufEnter でないとバッファ番号 bufnr("%") が正しく取得できない。
            autocmd BufEnter * :call s:outline_on_move_window()
            autocmd BufLeave * :call s:outline_on_leave_window()
            " ウインドウを閉じることで別ウインドウに入った場合、
            " BufEnterのタイミングでは、閉じている最中にアウトラインを開くことになり、画面分割のエラーになるため遅延させる。
            autocmd CursorMoved * :call s:outline_delayed_open()
        augroup END
        call s:outline_open()
    endfunction

    function! s:outline_stop()
        augroup outline
            autocmd!
        augroup END
        silent UniteClose
    endfunction

    command! -nargs=0 Outline call s:outline_open()
    command! -nargs=0 OutlineStart call s:outline_start()
    command! -nargs=0 OutlineStop call s:outline_stop()
'''

[[plugins]]
repo = 'vim-scripts/vim-stylus'
on_path = '.*\.styl'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'stylus')
'''

[[plugins]]
repo = 'Quramy/tsuquyomi'
depends = 'Shougo/vimproc.vim'
on_ft = 'typescript'
hook_source = '''
    augroup typescript
        autocmd FileType typescript nmap <buffer> <Leader><Return> : <C-u>echo tsuquyomi#hint()<CR>
        autocmd FileType typescript nmap <buffer> <Leader>c <Plug>(TsuquyomiRenameSymbolC)
    augroup END
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_path = '.*\.ts'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'typescript')
'''

[[plugins]]
repo = 'mgrabovsky/coq.vim'
on_path = '.*\.v'

[[plugins]]
repo = 'vim-scripts/CoqIDE'
on_ft = 'coq'
hook_source = '''
    nmap <Leader><Enter> :CoqIDEToCursor<CR>
'''

[[plugins]]
repo = 'adimit/prolog.vim'
on_path = '.*\.swi'
hook_add = '''
    augroup Prolog
        autocmd BufNewFile,BufRead *.swi setfiletype prolog
    augroup END
'''

[[plugins]]
repo = 'taqenoqo/vim2hs'
on_path = ['.*\.hs', '.*\.hsc']
hook_source = '''
    vunmap ao
    vunmap io
    let g:haskell_conceal_wide = 1
    let g:haskell_conceal_bad = 1
    let g:haskell_conceal = 1
    let g:haskell_indent_double = 0
    let g:haskell_indent_offside = 0
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    let g:LanguageClient_serverCommands = { 'haskell': ['hie-wrapper'] }
    let g:LanguageClient_diagnosticsDisplay =
        \ {
            \ 1: {
                \ "name": "Error",
                \ "texthl": "ALEError",
                \ "signText": "X",
                \ "signTexthl": "ALEErrorSign",
            \ },
            \ 2: {
                \ "name": "Warning",
                \ "texthl": "ALEWarning",
                \ "signText": "!",
                \ "signTexthl": "ALEWarningSign",
            \ },
            \ 3: {
                \ "name": "Information",
                \ "texthl": "ALEInfo",
                \ "signText": "i",
                \ "signTexthl": "ALEInfoSign",
            \ },
            \ 4: {
                \ "name": "Hint",
                \ "texthl": "ALEInfo",
                \ "signText": "i",
                \ "signTexthl": "ALEInfoSign",
            \ },
        \ }
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <Leader>M :call LanguageClient_contextMenu()<CR>
    nnoremap <silent> <Leader>t :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> <Leader>n :call LanguageClient#textDocument_rename()<CR>

    hi link ALEErrorSign Error
    hi link ALEWarningSign Warning
    hi link ALEInfoSign Info
    
    let g:LanguageClient_rootMarkers = ['*.cabal', 'stack.yaml']
'''

[[plugins]]
repo = 'toyamarinyon/vim-swift'
on_path = '.*\.swift'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'swift')
'''

[[plugins]]
repo = 'joom/latex-unicoder.vim'
hook_add = '''
    let g:unicoder_cancel_normal = 1
    let g:unicoder_cancel_insert = 1
    let g:unicoder_cancel_visual = 1
    let g:unicoder_no_map = 1
    inoremap <C-u> <Esc>:call unicoder#start(1)<CR>
'''

[[plugins]]
repo = 'taqenoqo/tex-conceal.vim'
rev = 'my-custom'
on_path = ['.*\.md', '.*\.tex']
hook_source = '''
    hi clear Conceal
    set conceallevel=2
    let g:tex_conceal="abdgm"
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_path = '.*\.toml'

